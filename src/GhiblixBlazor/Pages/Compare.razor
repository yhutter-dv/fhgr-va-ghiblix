@page "/compare"
@using GhiblixBlazor.Models
@using GhiblixBlazor.Services
@inject HttpClient Http
@inject IGhibliDataService GhibliDataService

<PageTitle>Compare</PageTitle>

<div class="filter-sidebar">
    <p class="title">Filter Settings</p>
    
    <p class="section-title">Runtime</p>
    <p class="section-subtitle">in minutes</p>
    <div class="slider-container">
        <p class="slider-text">0</p>
        <input type="range" min="0" max="100" value="50" class="slider">
        <p class="slider-text">100</p>
    </div>
    
    <p class="section-title">Number of races</p>
    <div class="slider-container">
        <p class="slider-text">0</p>
        <input type="range" min="0" max="100" value="50" class="slider">
        <p class="slider-text">100</p>
    </div>

    <p class="section-title">Year of Release</p>
    <div class="year-button-container">
        @foreach (var year in _movieReleaseYears)
        {
            <button class="filter-button" type="button">@year</button>
        }
    </div>
    
    <div class="spacer"></div>
    
    <div class="apply-filter-container">
        <button class="filter-button active" type="button">Apply</button>
        <button class="filter-button" type="button">Show All</button>
    </div>
</div>

<div class="content">
    <p class="section-title">Compare by Runtime</p>
    
    <div class="card-container">
        <div class="card">
            <p class="title">Score</p>
            <Chart Config="_runtimeWithScoreBarChartConfig" @ref="_runtimeWithScoreBarChart"></Chart>
        </div>
    </div>
</div>

@code {

    private BarChartConfig _runtimeWithScoreBarChartConfig;
    private Chart _runtimeWithScoreBarChart;
    private IEnumerable<int> _movieReleaseYears;
    
    protected override async Task OnInitializedAsync()
    {
        _movieReleaseYears = await GhibliDataService.GetMovieReleaseYears();
        var maxRuntime = 999; // TODO: Make runtime dynamic
        var data = await GhibliDataService.GetRuntimeWithScores(_movieReleaseYears.Take(10), maxRuntime);
        InitializeRuntimeWithScoreBarChart(data);
    }

    private void InitializeRuntimeWithScoreBarChart(RuntimeWithScoreData data)
    {
        _runtimeWithScoreBarChartConfig = new BarChartConfig
        {
            Options = new Options()
            {
                Plugins = new Plugins()
                {
                    Legend = new Legend()
                    {
                        Align = Align.Center,
                        Display = false,
                        Position = LegendPosition.Right
                    }
                },
                Scales = new Dictionary<string, Axis>()
                {
                    {
                        Scales.XAxisId, new Axis()
                        {
                            Grid = new Grid()
                            {
                                Display = false
                            },
                            Stacked = false,
                            Ticks = new Ticks()
                            {
                                MaxRotation = 0,
                                MinRotation = 0
                            }
                        }
                    },
                    {
                        Scales.YAxisId, new Axis()
                        {
                            Stacked = false,
                            Grid = new Grid()
                            {
                                Display = false
                            }
                        }
                    }
                }
            },
            Data =
            {
                Labels = new List<string>(data.Years.Select(x => x.ToString()))
            }
        };
        _runtimeWithScoreBarChartConfig.Data.Datasets.Add(new BarDataset
        {
            Label = $"{data.RuntimeInMinutes} Minutes",
            Data = data.AverageScores.ToList(),
            BackgroundColor = ["#5DE4C7"],
            BorderWidth = 0
        });
    }

}

